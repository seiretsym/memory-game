{"version":3,"sources":["components/Wrapper.js","components/Nav.js","components/Card.js","components/Instructions.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","children","Nav","className","score","maxScore","Card","style","card","background","color","icon","fontSize","margin","padding","Instructions","App","state","cards","cardList","handleCardClick","i","Promise","resolve","clicked","restartGame","setState","map","index","then","shuffleCards","temp","slice","day","length","Math","floor","random","this","onClick","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"s1CAUeA,MARf,SAAiBC,GACb,OACI,6BACKA,EAAMC,WCaJC,MAhBf,SAAaF,GACT,OACI,6BACI,wBAAIG,UAAU,sCACV,wBAAIA,UAAU,YACV,0BAAMA,UAAU,0CAAhB,UAAgE,0BAAMA,UAAU,cAAcH,EAAMI,SAExG,wBAAID,UAAU,YACV,0BAAMA,UAAU,0CAAhB,cAAoE,0BAAMA,UAAU,cAAcH,EAAMK,eCa7GC,MArBf,SAAcN,GAEV,IAAMO,EAAQ,CACVC,KAAM,CACFC,WAAYT,EAAMU,OAEtBC,KAAM,CACFD,MAAO,UACPE,SAAU,GACVC,OAAQ,OACRC,QAAS,IAIjB,OACI,yBAAKX,UAAU,OAAOI,MAAOA,EAAMC,MAC/B,uBAAGL,UAAWH,EAAMW,KAAMJ,MAAOA,EAAMI,S,OCLpCI,MAXf,WACI,OACI,yBAAKZ,UAAU,qDACX,wBAAIA,UAAU,gBAAd,gBACA,uBAAGA,UAAU,WAAb,oJCiHGa,E,2MA5GbC,MAAQ,CACNb,MAAO,EACPC,SAAU,EAEVa,MAAOC,G,EAITC,gBAAkB,SAAAC,GAEhB,OAAO,IAAIC,SAAQ,SAAAC,GAEb,EAAKN,MAAMC,MAAMG,GAAGG,QAEtB,EAAKC,eAEL,EAAKC,SAAS,CACZR,MAAO,EAAKD,MAAMC,MAAMS,KAAI,SAACnB,EAAMoB,GAOjC,OALIA,IAAUP,IAEZb,EAAKgB,SAAU,GAGVhB,KAETJ,MAAO,EAAKa,MAAMb,MAAQ,IAG5BmB,QAIDM,MAAK,WAEqB,KAArB,EAAKZ,MAAMb,MAEb,EAAKqB,cAGL,EAAKK,mB,EAMbL,YAAc,WAER,EAAKR,MAAMb,MAAQ,EAAKa,MAAMZ,UAChC,EAAKqB,SAAS,CACZrB,SAAU,EAAKY,MAAMb,QAIzB,EAAKsB,SAAS,CACZtB,MAAO,EACPc,MAAO,EAAKD,MAAMC,MAAMS,KAAI,SAAAnB,GAE1B,OADAA,EAAKgB,SAAU,EACRhB,OAIX,EAAKsB,gB,EAIPA,aAAe,WAKb,IAHA,IAAIC,EAAO,EAAKd,MAAMC,MAAMc,QAGnBC,EAAMF,EAAKG,OAAS,EAAGD,EAAM,EAAGA,IAAO,CAC9C,IAAIZ,EAAIc,KAAKC,MAAMD,KAAKE,UAAYJ,EAAM,IADI,EAEvB,CAACF,EAAKV,GAAIU,EAAKE,IAArCF,EAAKE,GAFwC,KAElCF,EAAKV,GAF6B,KAMhD,EAAKK,SAAS,CAAER,MAAOa,K,wEAIf,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAK3B,MAAOkC,KAAKrB,MAAMb,MAAOC,SAAUiC,KAAKrB,MAAMZ,WACnD,yBAAKF,UAAU,aAEb,kBAAC,EAAD,MACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gEAEZmC,KAAKrB,MAAMC,MAAMS,KAAI,SAACnB,EAAMoB,GAAP,OACpB,4BAAQW,QAAS,kBAAM,EAAKnB,gBAAgBQ,IAAQY,IAAKZ,GACvD,kBAAC,EAAD,CACElB,MAAOF,EAAKE,MACZ8B,IAAKZ,EACLjB,KAAMH,EAAKG,mB,GAnGb8B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.83d928d0.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Wrapper(props) {\n    return(\n        <div>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Wrapper;","import React from 'react';\n\nfunction Nav(props) {\n    return (\n        <div>\n            <ul className=\"nav bg-dark justify-content-center\">\n                <li className=\"nav-item\">\n                    <span className=\"nav-link text-warning font-weight-bold\">Score: <span className=\"text-light\">{props.score}</span></span>\n                </li>\n                <li className=\"nav-item\">\n                    <span className=\"nav-link text-success font-weight-bold\">Max Score: <span className=\"text-light\">{props.maxScore}</span></span>\n                </li>\n            </ul>\n        </div>\n\n    )\n}\n\nexport default Nav;","import React from 'react';\n\nfunction Card(props) {\n\n    const style = {\n        card: {\n            background: props.color,\n        },\n        icon: {\n            color: \"#DDDDDD\",\n            fontSize: 75,\n            margin: \"auto\",\n            padding: 0\n        }\n    }\n\n    return (\n        <div className=\"card\" style={style.card}>\n            <i className={props.icon} style={style.icon}></i>\n        </div>\n    )\n}\n\nexport default Card","import React from 'react'\n\nfunction Instructions () {\n    return (\n        <div className=\"jumbotron my-3 p-3 bg-dark text-light text-center\">\n            <h4 className=\"text-warning\">Instructions</h4>\n            <p className=\"p-0 m-0\">\n                To play, simply click on a card. You gain 1 score per card clicked, but be careful! Your score will reset if you click on the same card twice!\n            </p>\n        </div>\n    )\n}\n\nexport default Instructions","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper';\nimport Nav from './components/Nav';\nimport Card from './components/Card';\nimport cardList from \"./components/cardList.json\"\nimport Instructions from \"./components/Instructions\"\n\nclass App extends Component {\n\n  // define state\n  state = {\n    score: 0,\n    maxScore: 0,\n    // cuz we have 16 cards\n    cards: cardList\n  }\n\n  // do stuff when card is clicked\n  handleCardClick = i => {\n    // wrap score conditions in a promise\n    return new Promise(resolve => {\n      // if card has already been clicked...\n      if (this.state.cards[i].clicked) {\n        // welp, user lost. restart!\n        this.restartGame()\n      } else {\n        this.setState({\n          cards: this.state.cards.map((card, index) => {\n            // if current card index matches i\n            if (index === i) {\n              // change clicked to true\n              card.clicked = true;\n            }\n            // return the card data back to array\n            return card;\n          }),\n          score: this.state.score + 1,\n        })\n        // resolve so we can process the next step\n        resolve()\n      }\n    })\n      // then...\n      .then(() => {\n        // max moves is 16, so..\n        if (this.state.score === 16) {\n          // restart if that's true\n          this.restartGame();\n        } else {\n          // continue the game and shuffle if not\n          this.shuffleCards();\n        }\n      })\n  }\n\n  // things to do when user loses\n  restartGame = () => {\n    // check if score is higher than maxScore before updating\n    if (this.state.score > this.state.maxScore) {\n      this.setState({\n        maxScore: this.state.score\n      })\n    }\n    // reset score, set maxScore, reset clicked to false\n    this.setState({\n      score: 0,\n      cards: this.state.cards.map(card => {\n        card.clicked = false;\n        return card;\n      })\n    })\n    // shuffle the cards again\n    this.shuffleCards();\n  }\n\n  // shuffles the cards around\n  shuffleCards = () => {\n    // clone state.cards into temp\n    let temp = this.state.cards.slice();\n\n    // every day i shuffle!\n    for (let day = temp.length - 1; day > 0; day--) {\n      let i = Math.floor(Math.random() * (day + 1));\n      [temp[day], temp[i]] = [temp[i], temp[day]]\n    }\n\n    // damn right you're shuffled!\n    this.setState({ cards: temp })\n  }\n\n  // magically makes things appear\n  render() {\n    return (\n      <Wrapper>\n        <Nav score={this.state.score} maxScore={this.state.maxScore} />\n        <div className=\"container\">\n          {/* display instructions */}\n          <Instructions />\n          <div className=\"row\">\n            <div className=\"col-md-9 d-flex flex-wrap justify-content-center p-0 mx-auto\">\n              {/* display the cards */}\n              {this.state.cards.map((card, index) =>\n                <button onClick={() => this.handleCardClick(index)} key={index}>\n                  <Card\n                    color={card.color}\n                    key={index}\n                    icon={card.icon}\n                  ></Card>\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}